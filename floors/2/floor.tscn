[gd_scene load_steps=8 format=3 uid="uid://db7bh4o7800m4"]

[ext_resource type="PackedScene" uid="uid://bq30a2ioowtop" path="res://base_character.tscn" id="1_s7yy5"]
[ext_resource type="PackedScene" uid="uid://cpxhako1m6p7c" path="res://book_cart.tscn" id="2_lvsel"]
[ext_resource type="PackedScene" uid="uid://nmo68shnomyg" path="res://interaction_screen.tscn" id="3_fhtks"]
[ext_resource type="PackedScene" uid="uid://c0b40e0mjtfw0" path="res://interaction_screen_with_bookshelf.tscn" id="4_5pc5a"]
[ext_resource type="PackedScene" uid="uid://c0cfudvcyyy8v" path="res://skeleton.tscn" id="5_1enc2"]
[ext_resource type="PackedScene" uid="uid://dgd2o4kb0fjvf" path="res://hud.tscn" id="6_toqov"]

[sub_resource type="GDScript" id="GDScript_y80um"]
script/source = "extends StaticBody3D

# put scenes you want added to your floor here
# shelf is 4x2.5x.5
var shelf_scene = preload(\"res://assets/models/bookshelf_3m.tscn\")
var table_scene = preload(\"res://blender_assets/table.blend\")
var grass_floor = preload(\"res://blender_assets/grass_floor.blend\")
var flower_floor = preload(\"res://blender_assets/flower_floor.blend\")
var cobble_floor = preload(\"res://blender_assets/cobble_floor.blend\")
var shiny_ceiling = preload(\"res://blender_assets/shiny_ceiling.blend\")
var ceiling_walls_floor = preload(\"res://floors/wall_ceiling_lights.tscn\")

# hardcoding the size of the floors to 50x50 meters,
#	25 meters left of the origin, 25 right of the origin
var rowNum = -25
var colNum = -25

@onready var interactScreen = $InteractionLayer/InteractionScreen
@onready var interactSrceenWithBookshelf = $InteractionLayer/InteractionScreenWithBookshelf

# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	Global.floor_number = Global.FLOORS.SECOND
	
	print(\"Loading flooring.\\n\")
	# make a text file of 50 columns and 50 rows representing the
	#	floor layout. See floor.txt for example
	var layoutFile = FileAccess.open(\"res://floors/2/floor.txt\", FileAccess.READ)
	var rando = RandomNumberGenerator.new()
	var row = null
	var floor = null
	var item = null
	var item_placement_y = 0
	var item_placement_rot = 0
	var item_size = Vector3(1,1,1)
	var floor_rot = [0, 90, 180, 270]
	
	add_child(ceiling_walls_floor.instantiate())
	
	while layoutFile.get_position() < layoutFile.get_length():
		row = layoutFile.get_line()
		for tile in row:
			# like a switch statement in C++
			match tile:
				\".\":
					floor = grass_floor.instantiate()
				\"c\":
					floor = cobble_floor.instantiate()
				\"f\":
					floor = flower_floor.instantiate()
				# add whatever else you want automatically added to the floor
				#	here
			if (floor):
				add_child(floor)
				# the top of flooring should always be at y level zero
				#	so lower our 1m cube half a meter
				floor.set_global_position(Vector3(colNum,-0.5,rowNum))
				# randomly orient the floor to get some variety
				floor.set_rotation_degrees(Vector3(0,floor_rot[rando.randi_range(0,3)],0))
				floor = null
			colNum += 1
		colNum = -25
		rowNum += 1
	rowNum = -25
	print(\"Loading floor items.\\n\")
	layoutFile = FileAccess.open(\"res://floors/2/layout.txt\", FileAccess.READ)
	while layoutFile.get_position() < layoutFile.get_length():
		row = layoutFile.get_line()
		for tile in row:
			# hardcoded size of the 3m-long bookshelves
			item_size = Vector3(3, 2.5, 0.5)
			match tile:
				\"h\":
					item = shelf_scene.instantiate()
					# set this so that your item \"sits\" on the ground,
					#	which is at y == 0. Or figure out how to snap
					#	to the ground using this code.
					item_placement_y = 1.25
					item_placement_rot = 0
				\"v\":
					item = shelf_scene.instantiate()
					item_placement_y = 1.25
					item_placement_rot = 90
				\"t\":
					item = table_scene.instantiate()
					item_placement_y = 0.5
					item_size = Vector3(2,1,2)
			if (item):
				add_child(item)
				# prolly should just divide height of item and assign
				#	result to Vector3.y...
				item.set_global_position(Vector3(colNum,item_placement_y,rowNum))
				item.set_rotation_degrees(Vector3(0,item_placement_rot,0))
				# create collision object the same dimensions as item
				var shape3d = CollisionShape3D.new()
				var box = BoxShape3D.new()
				box.size = item_size
				shape3d.set_shape(box)
				shape3d.set_global_position(item.get_global_position())
				shape3d.set_rotation_degrees(item.get_rotation_degrees())
				add_child(shape3d)
				
				item = null
			colNum += 1
		colNum = -25
		rowNum += 1
	rowNum = -25
	print(\"Loading ceiling tiles.\")
	item_placement_y = 3
	item_placement_rot = 180
	for x in range(rowNum, -rowNum):
		for y in range(colNum, -colNum):
			item = shiny_ceiling.instantiate()
			if (item):
				add_child(item)
				item.set_global_position(Vector3(colNum,item_placement_y,rowNum))
				item.set_rotation_degrees(Vector3(item_placement_rot,0,0))
				item = null
			colNum += 1
		colNum = -25
		rowNum += 1
	rowNum = -25

# Called every frame. 'delta' is the elapsed time since the previous frame.
# I just put this here so I have a camera to see my work.
func _process(delta: float) -> void:
	var camera = find_child(\"Camera3D\")
	var rot = camera.get_rotation_degrees()
	camera.set_rotation_degrees(Vector3(-90,90,0))
	camera.set_global_position(Vector3(0,40,0))
	
	if Global.interactable_object_in_range == Global.INTERACTABLE.CART:
		interactScreen.show()
		if Input.is_action_just_pressed(\"ui_interact\"):
			Global.books_left_to_shelve_floor_1 -= 1
			Global.is_holding_book = true
	elif Global.interactable_object_in_range == Global.INTERACTABLE.ELEVATOR && Global.books_shelved == 10:
		interactScreen.show()
	elif Global.interactable_object_in_range == Global.INTERACTABLE.SHELF:
		interactSrceenWithBookshelf.show()
		if Input.is_action_just_pressed(\"ui_interact\") || Input.is_action_just_pressed(\"power_up\"):
			Global.is_holding_book = false
			Global.books_shelved += 1
	else:
		interactScreen.hide()
		interactSrceenWithBookshelf.hide()
"

[node name="2" type="StaticBody3D"]
script = SubResource("GDScript_y80um")

[node name="Camera3D" type="Camera3D" parent="."]
current = true

[node name="OmniLight3D" type="OmniLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 3, 0)
light_color = Color(1, 1, 0.878431, 1)
omni_range = 30.0
omni_attenuation = 0.0

[node name="Base Character" parent="." instance=ExtResource("1_s7yy5")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0.109, 1.19598, 22.1502)
axis_lock_linear_y = true

[node name="Book Cart" parent="." instance=ExtResource("2_lvsel")]
transform = Transform3D(2, 0, 0, 0, 2, 0, 0, 0, 2, 3.069, 0.5, 21.6316)

[node name="InteractionLayer" type="CanvasLayer" parent="."]

[node name="InteractionScreen" parent="InteractionLayer" instance=ExtResource("3_fhtks")]
visible = false

[node name="InteractionScreenWithBookshelf" parent="InteractionLayer" instance=ExtResource("4_5pc5a")]
visible = false

[node name="skeleton" parent="." instance=ExtResource("5_1enc2")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.620492, 14.061)
slide_on_ceiling = false

[node name="HUD" parent="." instance=ExtResource("6_toqov")]
